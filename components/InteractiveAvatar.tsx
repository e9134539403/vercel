import {
  AvatarQuality,
  StreamingEvents,
  VoiceChatTransport,
  VoiceEmotion,
  StartAvatarRequest,
  STTProvider,
  ElevenLabsModel,
} from "@heygen/streaming-avatar";
import { useEffect, useRef, useState } from "react";
import { useMemoizedFn, useUnmount } from "ahooks";

import { Button } from "./Button";
import { AvatarConfig } from "./AvatarConfig";
import { AvatarVideo } from "./AvatarSession/AvatarVideo";
import { useStreamingAvatarSession } from "./logic/useStreamingAvatarSession";
import { AvatarControls } from "./AvatarSession/AvatarControls";
import { useVoiceChat } from "./logic/useVoiceChat";
import { StreamingAvatarProvider, StreamingAvatarSessionState } from "./logic";
import { LoadingIcon } from "./Icons";
import { MessageHistory } from "./AvatarSession/MessageHistory";

import { AVATARS } from "@/app/lib/constants";

/**
 * ------------------------------------------------------------------------------------------------------------------
 * ‚öôÔ∏è  Ô∏èDEFAULT CONFIG
 * ------------------------------------------------------------------------------------------------------------------
 *  ‚Ä¢ –ü–æ–¥–Ω—è–ª–∏ provider –¥–æ `GLADIA` ‚Äî —É –Ω–µ–≥–æ –ª—É—á—à–µ —à—É–º–æ–¥–∞–≤.
 *  ‚Ä¢ –ü–æ—Ä–æ–≥ confidence 0.8 ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤—ã–∫—Ä–∏–∫–∏/—Å–º–µ—Ö.
 * ------------------------------------------------------------------------------------------------------------------
 */
const DEFAULT_CONFIG: StartAvatarRequest = {
  quality: AvatarQuality.Low,
  avatarName: AVATARS[0].avatar_id,
  knowledgeId: undefined,
  voice: {
    rate: 1.5,
    emotion: VoiceEmotion.EXCITED,
    model: ElevenLabsModel.eleven_flash_v2_5,
  },
  language: "en",
  voiceChatTransport: VoiceChatTransport.WEBSOCKET,
  sttSettings: {
    provider: STTProvider.GLADIA,
    confidence: 0.8,
  },
};

function InteractiveAvatar() {
  const { initAvatar, startAvatar, stopAvatar, sessionState, stream } =
    useStreamingAvatarSession();
  const { startVoiceChat } = useVoiceChat();

  const [config, setConfig] = useState<StartAvatarRequest>(DEFAULT_CONFIG);

  const mediaStream = useRef<HTMLVideoElement>(null);

  /** –ü–æ–ª—É—á–∞–µ–º access‚Äëtoken —Å –±—ç–∫–µ–Ω–¥–∞ */
  async function fetchAccessToken() {
    const response = await fetch("/api/get-access-token", { method: "POST" });
    if (!response.ok) throw new Error("Token request failed");
    return response.text();
  }

  /**
   * --------------------------------------------------------------------------------------------------------------
   * üöÄ  startSessionV2
   * --------------------------------------------------------------------------------------------------------------
   *  ‚Ä¢ 1) —Å–æ–∑–¥–∞—ë–º avatar
   *  ‚Ä¢ 2) —Å—Ä–∞–∑—É –≤—ã–∫–ª—é—á–∞–µ–º –µ–≥–æ "—Å–ª—É—Ö" (stopListening) ‚Äî —á—Ç–æ–± —Å–º–µ—Ö –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–ª —Ä–µ—á—å
   *  ‚Ä¢ 3) –Ω–∞–≤–µ—à–∏–≤–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã start/stop talking ‚Üí —É–ø—Ä–∞–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å—é —Ä–µ—á–∏
   * --------------------------------------------------------------------------------------------------------------
   */
  const startSessionV2 = useMemoizedFn(async (isVoiceChat: boolean) => {
    try {
      const newToken = await fetchAccessToken();

      // 1Ô∏è‚É£ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
      const avatar = initAvatar(newToken);

      // 2Ô∏è‚É£ (—É–±—Ä–∞–Ω–æ: –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ stopListening –≤—ã–∑—ã–≤–∞–ª–æ 401)
//    –ü–µ—Ä–µ–∫–ª—é—á–∏–º —Å–ª—É—à–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏ –Ω–∏–∂–µ

      // 3Ô∏è‚É£ —É–ø—Ä–∞–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å—é: –∫–æ–≥–¥–∞ –∞–≤–∞—Ç–∞—Ä –≥–æ–≤–æ—Ä–∏—Ç ‚Üí mute, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª ‚Üí unmute
      avatar.on(StreamingEvents.AVATAR_START_TALKING, () => {
        avatar.stopListening();
      });
      avatar.on(StreamingEvents.AVATAR_STOP_TALKING, () => {
        avatar.startListening();
      });

      // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      // DEBUG‚Äëh–µ–Ω–¥–ª–µ—Ä—ã (–æ—Å—Ç–∞–≤–∏–ª –∫–∞–∫ –±—ã–ª–∏)
      // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      avatar.on(StreamingEvents.AVATAR_START_TALKING, (e) =>
        console.log("Avatar started talking", e)
      );
      avatar.on(StreamingEvents.AVATAR_STOP_TALKING, (e) =>
        console.log("Avatar stopped talking", e)
      );
      avatar.on(StreamingEvents.STREAM_DISCONNECTED, () =>
        console.log("Stream disconnected")
      );
      avatar.on(StreamingEvents.STREAM_READY, (event) =>
        console.log(">>>>> Stream ready:", event.detail)
      );
      avatar.on(StreamingEvents.USER_START, (event) =>
        console.log(">>>>> User started talking:", event)
      );
      avatar.on(StreamingEvents.USER_STOP, (event) =>
        console.log(">>>>> User stopped talking:", event)
      );
      avatar.on(StreamingEvents.USER_END_MESSAGE, (event) =>
        console.log(">>>>> User end message:", event)
      );
      avatar.on(StreamingEvents.USER_TALKING_MESSAGE, (event) =>
        console.log(">>>>> User talking message:", event)
      );
      avatar.on(StreamingEvents.AVATAR_TALKING_MESSAGE, (event) =>
        console.log(">>>>> Avatar talking message:", event)
      );
      avatar.on(StreamingEvents.AVATAR_END_MESSAGE, (event) =>
        console.log(">>>>> Avatar end message:", event)
      );

      // 4Ô∏è‚É£ —Å—Ç–∞—Ä—Ç—É–µ–º —Å–µ—Å—Å–∏—é
      await startAvatar(config);

      // –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å—Ä–∞–∑—É –≤—ã–∫–ª—é—á–∞–µ–º —Å–ª—É—Ö,
      // —á—Ç–æ–±—ã —Å–ª—É—á–∞–π–Ω—ã–µ –∑–≤—É–∫–∏ –Ω–µ –ø—Ä–µ—Ä–≤–∞–ª–∏ –ø–µ—Ä–≤—É—é —Ä–µ–ø–ª–∏–∫—É
      await avatar.stopListening();

      if (isVoiceChat) {
        await startVoiceChat();
      }
    } catch (error) {
      console.error("Error starting avatar session:", error);
    }
  });

  // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useUnmount(() => {
    stopAvatar();
  });

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–µ–¥–∏–∞–ø–æ—Ç–æ–∫ –∫ <video>
  useEffect(() => {
    if (stream && mediaStream.current) {
      mediaStream.current.srcObject = stream;
      mediaStream.current.onloadedmetadata = () => {
        mediaStream.current!.play();
      };
    }
  }, [mediaStream, stream]);

  return (
    <div className="w-full flex flex-col gap-4">
      <div className="flex flex-col rounded-xl bg-zinc-900 overflow-hidden">
        <div className="relative w-full aspect-video overflow-hidden flex flex-col items-center justify-center">
          {sessionState !== StreamingAvatarSessionState.INACTIVE ? (
            <AvatarVideo ref={mediaStream} />
          ) : (
            <AvatarConfig config={config} onConfigChange={setConfig} />
          )}
        </div>
        <div className="flex flex-col gap-3 items-center justify-center p-4 border-t border-zinc-700 w-full">
          {sessionState === StreamingAvatarSessionState.CONNECTED ? (
            <AvatarControls />
          ) : sessionState === StreamingAvatarSessionState.INACTIVE ? (
            <div className="flex flex-row gap-4">
              <Button onClick={() => startSessionV2(true)}>
                Start Voice Chat
              </Button>
              <Button onClick={() => startSessionV2(false)}>
                Start Text Chat
              </Button>
            </div>
          ) : (
            <LoadingIcon />
          )}
        </div>
      </div>
      {sessionState === StreamingAvatarSessionState.CONNECTED && (
        <MessageHistory />
      )}
    </div>
  );
}

export default function InteractiveAvatarWrapper() {
  return (
    <StreamingAvatarProvider basePath={process.env.NEXT_PUBLIC_BASE_API_URL}>
      <InteractiveAvatar />
    </StreamingAvatarProvider>
  );
}

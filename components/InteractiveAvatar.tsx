// components/InteractiveAvatar.tsx
import {
  AvatarQuality,
  StreamingEvents,
  VoiceChatTransport,
  VoiceEmotion,
  StartAvatarRequest,
  STTProvider,
  ElevenLabsModel,
} from "@heygen/streaming-avatar";

import { useEffect, useRef, useState, useCallback } from "react";
import { useMemoizedFn, useUnmount } from "ahooks";

import { Button } from "./Button";
import { AvatarConfig } from "./AvatarConfig";
import { AvatarVideo } from "./AvatarSession/AvatarVideo";
import { useStreamingAvatarSession } from "./logic/useStreamingAvatarSession";
import { AvatarControls } from "./AvatarSession/AvatarControls";
import { useVoiceChat } from "./logic/useVoiceChat";
import {
  StreamingAvatarProvider,
  StreamingAvatarSessionState,
} from "./logic";
import { LoadingIcon } from "./Icons";
import { MessageHistory } from "./AvatarSession/MessageHistory";
import { AVATARS } from "@/app/lib/constants";

// ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø –°–õ–ê–ë–û–ì–û –ò–ù–¢–ï–†–ù–ï–¢–ê ==========
const PODCAST_CONFIG: StartAvatarRequest = {
  quality: AvatarQuality.Low, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
  avatarName: AVATARS[0].avatar_id,
  knowledgeId: undefined, // –û—Ç–∫–ª—é—á–∞–µ–º Knowledge Base –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
  voice: {
    rate: 1.5,
    emotion: VoiceEmotion.EXCITED,
    model: ElevenLabsModel.eleven_flash_v2_5,
  },
  language: "ru", // –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –ø–æ–¥–∫–∞—Å—Ç–∞
  activityIdleTimeout: 900, // 15 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
  
  // –ö–†–ò–¢–ò–ß–ù–û –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:
  iceTransportPolicy: "relay", // –§–æ—Ä—Å–∏—Ä—É–µ–º TURN –¥–ª—è –æ–±—Ö–æ–¥–∞ NAT
  turnServer: "turn:global.relay.heygen.com:443?transport=tcp", // TCP –Ω–∞–¥–µ–∂–Ω–µ–µ UDP
  video: true, // –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞: false
  
  voiceChatTransport: VoiceChatTransport.WEBSOCKET, // WebSocket –Ω–∞–¥–µ–∂–Ω–µ–µ
  sttSettings: { 
    provider: STTProvider.DEEPGRAM,
  },
};

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞
const TRIGGER_WORDS = ["–≤–ª–æ–±—Å—Ç–µ—Ä", "–ª–æ–±—Å—Ç–µ—Ä", "–≤ –ª–æ–±—Å—Ç–µ—Ä"];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
const containsTriggerWord = (text: string): boolean => {
  const lowerText = text.toLowerCase();
  return TRIGGER_WORDS.some(word => lowerText.includes(word));
};

function InteractiveAvatar() {
  const { initAvatar, startAvatar, stopAvatar, sessionState, stream } =
    useStreamingAvatarSession();
  const { startVoiceChat } = useVoiceChat();

  const [config, setConfig] = useState<StartAvatarRequest>(PODCAST_CONFIG);
  const [isListeningMode, setIsListeningMode] = useState(true); // –†–µ–∂–∏–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [connectionStatus, setConnectionStatus] = useState<string>("idle");
  const [lastUserMessage, setLastUserMessage] = useState<string>("");
  
  const videoRef = useRef<HTMLVideoElement>(null);
  const avatarInstanceRef = useRef<any>(null);
  const configRef = useRef(config);
  const isVoiceChatRef = useRef(false);
  const freezeCountRef = useRef(0);
  const reconnectAttemptsRef = useRef(0);
  const MAX_RECONNECT_ATTEMPTS = 3;
  const MAX_FREEZE_COUNT = 2; // –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è

  useEffect(() => {
    configRef.current = config;
  }, [config]);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —Å retry –ª–æ–≥–∏–∫–æ–π
  const fetchAccessToken = async (retries = 3): Promise<string> => {
    for (let i = 0; i < retries; i++) {
      try {
        const response = await fetch("/api/get-access-token", {
          method: "POST",
          signal: AbortSignal.timeout(10000), // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        });
        
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        return await response.text();
      } catch (error) {
        console.error(`Token fetch attempt ${i + 1} failed:`, error);
        if (i === retries - 1) throw error;
        await new Promise(r => setTimeout(r, 1000 * (i + 1))); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
      }
    }
    throw new Error("Failed to fetch token after retries");
  };

  // –ú—è–≥–∫–∏–π —Ä–µ—Å—Ç–∞—Ä—Ç —Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞-–ø–æ—Ç–æ–∫–æ–≤
  const softRestartTracks = useMemoizedFn(async () => {
    if (sessionState !== StreamingAvatarSessionState.CONNECTED) return;
    
    try {
      console.info("üîÑ Attempting soft restart...");
      setConnectionStatus("reconnecting");
      
      // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç
      if (isVoiceChatRef.current) {
        await startVoiceChat();
      }
      
      freezeCountRef.current = 0;
      setConnectionStatus("connected");
      console.info("‚úÖ Soft restart successful");
    } catch (error: any) {
      console.error("‚ùå Soft restart failed:", error);
      setConnectionStatus("error");
      
      // –ï—Å–ª–∏ –º—è–≥–∫–∏–π —Ä–µ—Å—Ç–∞—Ä—Ç –Ω–µ –ø–æ–º–æ–≥, –ø—Ä–æ–±—É–µ–º –∂–µ—Å—Ç–∫–∏–π
      if (freezeCountRef.current >= MAX_FREEZE_COUNT) {
        await hardReset();
      }
    }
  });

  // –ñ–µ—Å—Ç–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–π —Å–µ—Å—Å–∏–∏
  const hardReset = useMemoizedFn(async () => {
    if (reconnectAttemptsRef.current >= MAX_RECONNECT_ATTEMPTS) {
      console.error("üö´ Max reconnection attempts reached");
      setConnectionStatus("failed");
      return;
    }

    console.warn("üî¥ Initiating hard reset...");
    reconnectAttemptsRef.current++;
    freezeCountRef.current = 0;

    try {
      // –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
      await stopAvatar();
      await new Promise(r => setTimeout(r, 2000)); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—á–∏—Å—Ç–∫—É
      
      // –ù–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      const token = await fetchAccessToken();
      const avatar = initAvatar(token);
      
      // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      setupEventHandlers(avatar);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
      await startAvatar(configRef.current);
      
      if (isVoiceChatRef.current) {
        await startVoiceChat();
      }
      
      setConnectionStatus("connected");
      console.info("‚úÖ Hard reset successful");
    } catch (error) {
      console.error("‚ùå Hard reset failed:", error);
      setConnectionStatus("failed");
    }
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  const setupEventHandlers = useCallback((avatar: any) => {
    avatarInstanceRef.current = avatar;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    avatar.on(StreamingEvents.STREAM_DISCONNECTED, async () => {
      console.warn("‚ö†Ô∏è Stream disconnected");
      setConnectionStatus("disconnected");
      await softRestartTracks();
    });

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    avatar.on(StreamingEvents.USER_END_MESSAGE, (event: any) => {
      const message = event?.detail?.message || "";
      setLastUserMessage(message);
      
      // –õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
      if (!containsTriggerWord(message) && isListeningMode) {
        console.log("üîá Ignoring message (no trigger word):", message);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —á—Ç–æ–±—ã –∞–≤–∞—Ç–∞—Ä –º–æ–ª—á–∞–ª
        if (avatarInstanceRef.current) {
          avatarInstanceRef.current.speak({
            text: "„Ö§", // –ù–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª
            taskType: "TALK",
            taskMode: "ASYNC",
          });
        }
        return false; // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
      }
      
      console.log("üéØ Trigger word detected, processing:", message);
    });

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    avatar.on(StreamingEvents.CONNECTION_QUALITY_CHANGED, (event: any) => {
      const quality = event?.detail;
      console.log("üì∂ Connection quality:", quality);
      
      if (quality === "poor" || quality === "disconnected") {
        setConnectionStatus("poor");
      }
    });

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    avatar.on(StreamingEvents.STREAM_READY, () => {
      console.log("‚úÖ Stream ready");
      setConnectionStatus("connected");
      reconnectAttemptsRef.current = 0;
    });

    avatar.on(StreamingEvents.AVATAR_START_TALKING, () => {
      console.log("üó£Ô∏è Avatar speaking");
    });

    avatar.on(StreamingEvents.AVATAR_STOP_TALKING, () => {
      console.log("ü§ê Avatar stopped");
    });
  }, [isListeningMode]);

  // –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
  const startSession = useMemoizedFn(async (enableVoice: boolean) => {
    try {
      setConnectionStatus("connecting");
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —Å retry
      const token = await fetchAccessToken();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      const avatar = initAvatar(token);
      setupEventHandlers(avatar);
      
      // –ó–∞–ø—É—Å–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Å–ª–∞–±–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
      await startAvatar(configRef.current);
      
      if (enableVoice) {
        await startVoiceChat();
        isVoiceChatRef.current = true;
      }
      
      setConnectionStatus("connected");
    } catch (error) {
      console.error("‚ùå Session start failed:", error);
      setConnectionStatus("error");
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      setTimeout(() => {
        if (reconnectAttemptsRef.current < MAX_RECONNECT_ATTEMPTS) {
          hardReset();
        }
      }, 5000);
    }
  });

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–∏—Å–∞–Ω–∏–π –≤–∏–¥–µ–æ
  useEffect(() => {
    if (sessionState !== StreamingAvatarSessionState.CONNECTED) return;

    let prevTime = 0;
    const checkInterval = setInterval(async () => {
      const video = videoRef.current;
      if (!video || !video.srcObject) return;

      const currentTime = video.currentTime;
      
      if (currentTime === prevTime && !video.paused) {
        freezeCountRef.current++;
        console.warn(`‚ö†Ô∏è Video freeze detected (${freezeCountRef.current})`);
        
        if (freezeCountRef.current >= MAX_FREEZE_COUNT) {
          await softRestartTracks();
        }
      } else {
        freezeCountRef.current = 0;
      }
      
      prevTime = currentTime;
    }, 5000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(checkInterval);
  }, [sessionState, softRestartTracks]);

  // –ü—Ä–∏–≤—è–∑–∫–∞ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞
  useEffect(() => {
    if (stream && videoRef.current) {
      videoRef.current.srcObject = stream;
      videoRef.current.onloadedmetadata = () => {
        videoRef.current?.play().catch(e => {
          console.error("Video play error:", e);
        });
      };
    }
  }, [stream]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useUnmount(() => {
    stopAvatar();
  });

  return (
    <div className="w-full flex flex-col gap-4">
      {/* –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è */}
      <div className="flex items-center gap-2 p-2 bg-zinc-800 rounded">
        <div className={`w-3 h-3 rounded-full ${
          connectionStatus === 'connected' ? 'bg-green-500' :
          connectionStatus === 'connecting' || connectionStatus === 'reconnecting' ? 'bg-yellow-500' :
          connectionStatus === 'error' || connectionStatus === 'failed' ? 'bg-red-500' :
          'bg-gray-500'
        }`} />
        <span className="text-sm text-zinc-300">
          –°—Ç–∞—Ç—É—Å: {connectionStatus} | 
          –†–µ–∂–∏–º: {isListeningMode ? 'üîá –°–ª—É—à–∞—é' : 'üéôÔ∏è –ê–∫—Ç–∏–≤–µ–Ω'} |
          –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {lastUserMessage.slice(0, 30)}...
        </span>
        <Button 
          className="ml-auto !py-1 !px-3 text-xs"
          onClick={() => setIsListeningMode(!isListeningMode)}
        >
          {isListeningMode ? '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–í —Ä–µ–∂–∏–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è'}
        </Button>
      </div>

      <div className="flex flex-col rounded-xl bg-zinc-900 overflow-hidden">
        <div className="relative w-full aspect-video overflow-hidden flex flex-col items-center justify-center">
          {sessionState !== StreamingAvatarSessionState.INACTIVE ? (
            <AvatarVideo ref={videoRef} />
          ) : (
            <AvatarConfig config={config} onConfigChange={setConfig} />
          )}
        </div>
        
        <div className="flex flex-col gap-3 items-center justify-center p-4 border-t border-zinc-700 w-full">
          {sessionState === StreamingAvatarSessionState.CONNECTED ? (
            <AvatarControls />
          ) : sessionState === StreamingAvatarSessionState.INACTIVE ? (
            <div className="flex flex-col gap-3 items-center">
              <div className="flex flex-row gap-4">
                <Button onClick={() => startSession(true)}>
                  üéôÔ∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–ª—è –ø–æ–¥–∫–∞—Å—Ç–∞
                </Button>
                <Button onClick={() => startSession(false)}>
                  üí¨ –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                </Button>
              </div>
              <div className="text-xs text-zinc-400 text-center">
                –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–≤–æ–¥–Ω–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π Wi-Fi
              </div>
            </div>
          ) : (
            <LoadingIcon />
          )}
        </div>
      </div>
      
      {sessionState === StreamingAvatarSessionState.CONNECTED && (
        <MessageHistory />
      )}
    </div>
  );
}

export default function InteractiveAvatarWrapper() {
  return (
    <StreamingAvatarProvider basePath={process.env.NEXT_PUBLIC_BASE_API_URL}>
      <InteractiveAvatar />
    </StreamingAvatarProvider>
  );
}

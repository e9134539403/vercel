import { useCallback, useRef } from "react";

import { useStreamingAvatarContext } from "./context";

/**
 * useVoiceChat
 * ---------------------------------------------------------------------------
 * ‚Ä¢ –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–º —Ç—Ä–µ–∫–æ–º (micTrackRef) ‚Äî –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –≤–æ
 *   –≤—Ä–µ–º—è —Ä–µ—á–∏ –∞–≤–∞—Ç–∞—Ä–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –≥–ª—É—à–∏—Ç—å –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ –∏ –∏–∑–±–µ–≥–∞—Ç—å –ª–æ–∂–Ω—ã—Ö
 *   USER_START‚Äë—Å–æ–±—ã—Ç–∏–π.
 * ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç micTrackRef –Ω–∞—Ä—É–∂—É.
 * ---------------------------------------------------------------------------
 */
export const useVoiceChat = () => {
  const {
    avatarRef,
    isMuted,
    setIsMuted,
    isVoiceChatActive,
    setIsVoiceChatActive,
    isVoiceChatLoading,
    setIsVoiceChatLoading,
  } = useStreamingAvatarContext();

  /**
   * –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π AudioTrack –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞; –Ω—É–∂–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è enabled.
   */
  const micTrackRef = useRef<MediaStreamTrack | null>(null);

  /**
   * –°—Ç–∞—Ä—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞.
   * ‚Ä¢ –ü–æ–ª—É—á–∞–µ–º getUserMedia ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º track ‚Üí attachUserAudio
   * ‚Ä¢ –í—ã–∑—ã–≤–∞–µ–º startVoiceChat SDK
   */
  const startVoiceChat = useCallback(
    async (isInputAudioMuted?: boolean) => {
      if (!avatarRef.current) return;

      setIsVoiceChatLoading(true);

      // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ç–æ–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: { echoCancellation: true, noiseSuppression: true },
      });

      // 2Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ mute/unmute
      micTrackRef.current = stream.getAudioTracks()[0] ?? null;
      if (isInputAudioMuted && micTrackRef.current) {
        micTrackRef.current.enabled = false;
      }

      // 3Ô∏è‚É£ –ü–µ—Ä–µ–¥–∞—ë–º –ø–æ—Ç–æ–∫ –≤ SDK
      await avatarRef.current.startVoiceChat({ isInputAudioMuted });

      setIsVoiceChatLoading(false);
      setIsVoiceChatActive(true);
      setIsMuted(!!isInputAudioMuted);
    },
    [avatarRef, setIsMuted, setIsVoiceChatActive, setIsVoiceChatLoading],
  );

  /** –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞ */
  const stopVoiceChat = useCallback(() => {
    if (!avatarRef.current) return;

    avatarRef.current.closeVoiceChat();
    setIsVoiceChatActive(false);
    setIsMuted(true);

    // –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞—Ç—Ä–µ–∫ –∏ —á–∏—Å—Ç–∏–º —Å—Å—ã–ª–∫—É
    micTrackRef.current?.stop();
    micTrackRef.current = null;
  }, [avatarRef, setIsMuted, setIsVoiceChatActive]);

  /** –ì–ª—É—à–∏–º –≤—Ö–æ–¥–Ω–æ–π –∑–≤—É–∫ */
  const muteInputAudio = useCallback(() => {
    if (!avatarRef.current) return;

    micTrackRef.current && (micTrackRef.current.enabled = false);
    avatarRef.current.muteInputAudio();
    setIsMuted(true);
  }, [avatarRef, setIsMuted]);

  /** –†–∞–∑–º—å—é—á–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π –∑–≤—É–∫ */
  const unmuteInputAudio = useCallback(() => {
    if (!avatarRef.current) return;

    micTrackRef.current && (micTrackRef.current.enabled = true);
    avatarRef.current.unmuteInputAudio();
    setIsMuted(false);
  }, [avatarRef, setIsMuted]);

  return {
    startVoiceChat,
    stopVoiceChat,
    muteInputAudio,
    unmuteInputAudio,
    isMuted,
    isVoiceChatActive,
    isVoiceChatLoading,
    micTrackRef, // üëà —ç–∫—Å–ø–æ—Ä—Ç –Ω–∞—Ä—É–∂—É
  };
};
